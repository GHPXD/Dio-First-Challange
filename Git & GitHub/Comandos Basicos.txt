##GIT CONFIG##
Usado para definir valores de configuração específicos do usuário como e-mail, algoritmo preferido para diff, nome de usuário e formato de arquivo etc.

git config --global user.email sam@google.com

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT INT##
Usado para criar um novo repositório GIT. Uso:

git init

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT ADD##
O comando git add pode ser usado para adicionar arquivos ao índice. Por exemplo, o seguinte comando irá adicionar um arquivo chamado temp.txt presente no diretório local para o índice:

-Especifico:
git add temp.txt

-Compilado:
git add ./git add -A (add todos os itens)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT CLONE##
Usado para fins de verificação de repositório.

Se o repositório estiver em um servidor remoto, use:
git clone alex@93.188.160.58:/path/to/repository

Se uma cópia de trabalho de um repositório local for criada, use:
git clone /path/to/repository

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT COMMIT##
Usado para confirmar as alterações na cabeça. Tenha em atenção que quaisquer alterações efetuadas não irão para o repositório remoto. Uso:

git commit –m “coloque sua mensagem aqui”

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT STATUS##
Exibe a lista de arquivos alterados juntamente com os arquivos que ainda não foram adicionados ou confirmados. Uso:

git status

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT PUSH##
Envia as alterações feitas para o ramo main do repositório remoto associado ao diretório de trabalho. Por exemplo:

git push origin main

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT CHECKOUT##
Usado para criar ramos ou alternar entre eles. 

Por exemplo, o seguinte cria um novo ramo e muda para ele:
command git checkout -b <branch-name>

Para simplesmente mudar de um ramo para outro, use:
git checkout <branch-name>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT REMOTE##
Permite que um usuário se conecte a um repositório remoto.

Lista os repositórios remotos atualmente configurados:
git remote –v

Permite que o usuário se conecte a um servidor remoto:
git remote add origin <93.188.160.58>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT BRANCH##
Usado para listar, criar ou excluir ramos. 

Para listar todos os ramos presentes no repositório, use:
git branch

Para excluir um ramo:
git branch –d <branch-name>

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##⁫GIT PULL##
Para mesclar todas as alterações presentes no repositório remoto para o diretório de trabalho local, o comando pull é usado. Uso:

git pull

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT MERGE##
O comando git merge é usado para mesclar uma ramificação no ramo ativo. Uso:

git merge <branch-name>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT DIFF##
Usado para listar os conflitos. 

Para visualizar conflitos com o arquivo base, use
git diff --base <file-name>

Usado para exibir os conflitos entre ramos about-to-be-merged antes de mesclá-los:
git diff <source-branch> <target-branch>

Para listar todos os conflitos atuais, use:
git diff

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT TAG##
Usada para marcar compromissos específicos com alças simples. Um exemplo pode ser:

git tag 1.1.0 <insert-commitID-here>

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT LOG##
Exibe uma lista de compromissos em uma ramificação, juntamente com os detalhes pertinentes. Um exemplo de saída pode ser:

commit 15f4b6c44b3c8344caasdac9e4be13246e21sadw
Author: Alex Hunter <alexh@gmail.com>
Date:   Mon Oct 1 12:56:29 2016 -0600

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT RESET##
Para redefinir o índice e o diretório de trabalho para o estado do último commit, o comando git reset é usado. Uso:

git reset --hard HEAD

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT RM##
Usado para remover arquivos do índice e do diretório de trabalho. Uso:

git rm filename.txt

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT STASH##
Salva as mudanças que não devem ser cometidos imediatamente, mas em uma base temporária. Uso:

git stash

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT SHOW##
Para visualizar informações sobre qualquer objeto git, use o comando git show. Por exemplo:

git show

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT FETCH##
Permite que um usuário obtenha todos os objetos do repositório remoto que atualmente não residem no diretório de trabalho local. Exemplo de uso:

git fetch origin

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT LS-TREE##
Para exibir um objeto de árvore juntamente com o nome e o modo de cada item e o valor SHA-1 do blob, use o comando git ls-tree. Por exemplo:

git ls-tree HEAD

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT CAT##
Usando o valor SHA-1, exiba o tipo de um objeto usando o comando git cat-file. Por exemplo:

git cat-file –p d670460b4b4aece5915caf5c68d12f560a9fe3e4

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT GREP##
Permite que um usuário procure através das árvores de conteúdo frases e / ou palavras. Por exemplo, para pesquisar www.hostinger.com em todos os arquivos use:

git grep "www.hostinger.com"

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GITK##
gitk é a interface gráfica para um repositório local que pode ser invocado digitando e executando:

gitk

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT INSTAWEB##
Com o comando git instaweb, um servidor web pode ser executado em interface com o repositório local. Um navegador da Web também é automaticamente direcionado para ele. Por exemplo:

git instaweb –httpd=webrick

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT GC##
Para otimizar o repositório através da coleta de lixo, que irá limpar arquivos desnecessários e otimizá-los, use:

git gc

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT ARCHIVE##
Permite que um usuário crie um arquivo zip ou tar contendo os componentes de uma única árvore de repositório. Por exemplo:

git archive --format=tar master

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT PRUNE##
Através do comando git prune, os objetos que não têm ponteiros de entrada são excluídos. Uso:

git prune

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT FSCK##
Para executar uma verificação de integridade do sistema de arquivos git, use o comando git fsck. Todos os objetos corrompidos são identificados:

git fsck

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##GIT REBASE##
Usado para reaplicação de compromissos em outro ramo. Por exemplo:

git rebase master

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------